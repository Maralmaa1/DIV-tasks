{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyO7eVeO5CmuUSzW63rNsA0U",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Maralmaa1/DIV-tasks/blob/main/Paper%20folding%20problem\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 1] Implementation using exponentiation arithmetic operators\n",
        "Create a program that uses the exponentiation arithmetic operator.\n",
        "As a template, we have prepared a code that calculates the thickness of a sheet of paper when it is folded once. Rewrite the code to calculate the thickness when the paper is folded 43 times."
      ],
      "metadata": {
        "id": "t4-KLkPm7kY3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Code to calculate the thickness when the paper is folded 43 times\n",
        "\n",
        "thickness=0.00008\n",
        "   \n",
        "folded_thickness = thickness * 2 **43\n",
        "print(\"Thickness: {} meters\".format(folded_thickness))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3gjilL8ISrZh",
        "outputId": "b9b0c415-78d1-40f6-97c3-a6b033efdb33"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Thickness: 703687441.77664 meters\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 2] Unit Conversion\n",
        "If the unit is meters, it's hard to feel the difference, so please convert the unit to ◯◯ 10,000 kilometers and display it.\n",
        "\n",
        "​We have prepared a code converted to ◯◯ kilometers as a sample, so please refer to it when working on it. It is specified that up to 2 digits are displayed after the decimal point.\n",
        "\n",
        "The distance to the moon is approximately 384,400 km. Let's check if the folded paper arrives in the moon."
      ],
      "metadata": {
        "id": "Hbzx7R0n7us4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert meters to 10000 kilometers and display with ten decimal places\n",
        "distance = 384400\n",
        "print(\"Thickness: {: .10f} *10^4 kilometers\".format(thickness / 10000000))\n",
        "if(distance <= folded_thickness ):\n",
        "  print(\"The folded paper can arrive in the moon\")\n",
        "else:\n",
        "  print(\"The folded paper can not arrive in the moon\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KcKSIB0KyyKa",
        "outputId": "5a9776ea-6737-43b5-e308-4b51891b5450"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Thickness:  70.3687441777 *10^4 kilometers\n",
            "The folded paper can arrive in the moon\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 3] Create using a for statement\n",
        "Next, create a program that uses the for statement.\n",
        "\n",
        "Do not use exponentiation arithmetic operators. Only the four arithmetic operations+ , - , * , / ) are allowed."
      ],
      "metadata": {
        "id": "_h00Vp13UeOF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "folded_thickness = thickness\n",
        "for x in range (43):\n",
        "  folded_thickness = folded_thickness * 2\n",
        "print(\"Thickness: {} meters\".format(folded_thickness))\n"
      ],
      "metadata": {
        "id": "_FJbK4XnNxoM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f3eaf387-2ab8-4171-a119-0d5759c4a3e9"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Thickness: 703687441.77664 meters\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 4] Comparison of calculation time\n",
        "Both of the above two methods are correct, but when comparing the goodness of the code, for example, the following points are evaluated.\n",
        "\n",
        "Execution speed\n",
        "Memory usage\n",
        "Readability\n",
        "Scalability\n",
        "Reusability\n",
        "This time I will compare the execution speed.\n",
        "\n",
        "Use the template below to output the execution times of the two methods and compare them. Compare the time in the range excluding the parts used by either method, such as variable definition and print​"
      ],
      "metadata": {
        "id": "vVSfxr508lns"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "start = time.time()\n",
        "##### \n",
        "folded_thickness = thickness * 2 ** 43\n",
        "#####\n",
        "elapsed_time = time.time() - start\n",
        "print(\"time : {}[s]\".format(elapsed_time))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wI1RjHrUA9jA",
        "outputId": "4c7b94b1-4fc6-4cf7-8579-4c64f72039fb"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "time : 0.00012612342834472656[s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "start = time.time()\n",
        "folded_thickness = thickness\n",
        "#####\n",
        "for x in range (43):\n",
        "  folded_thickness = folded_thickness * 2\n",
        "#####\n",
        "elapsed_time = time.time() - start\n",
        "print(\"time : {}[s]\".format(elapsed_time))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "POrM1ow5Jxxj",
        "outputId": "1a17b96e-377f-4373-fa98-95e27df5b109"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "time : 0.0001556873321533203[s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 5] Saving to a list\n",
        "So far, we have only used the last value after 43 folds, but we need the process values as well to visualize them in the graph; add the code that records the total of 44 process values to the code using the for statement.\n",
        "\n",
        "<< Hint >>\n",
        "\n",
        "First, create an empty list.\n",
        "Next, add the value before folding to the list.\n",
        "Add the value of the process of folding the paper up to n times in the for statement to the list.\n",
        "Finally, let's use the len function to confirm that 44 values are stored in the list."
      ],
      "metadata": {
        "id": "kVwEnW_SBByW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list = []\n",
        "for i in range(44):\n",
        "  list.append(thickness*2**i)\n",
        "print(\"{} values are stored in list\".format(len(list)))\n",
        "print(\"{}\".format(list[-1]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g-zGGTaiK8Rp",
        "outputId": "2a1eef2e-7680-470a-f48f-fb3b10ac5959"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "703687441.77664\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 6] Displaying a line graph\n",
        "A library called Matplotlib is used to draw the graph. Use the following template after the code you want to record in the list."
      ],
      "metadata": {
        "id": "VSAtQ6etK9x4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "# Display the graph. Title and axis label name.\n",
        "plt.title(\"thickness of folded paper\")\n",
        "plt.xlabel(\"number of folds\")\n",
        "plt.ylabel(\"thickness [m]\")\n",
        "plt.plot(list)  \n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "vymlWJi2P29U",
        "outputId": "ea089550-1c26-42e8-9f18-a7d15c203652"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Problem 7] Customizing graphs\n",
        "Let's customize the graph to make it easier to see. Create at least 3 customized graphs. For example, the line color can be changed to red by rewriting as follows."
      ],
      "metadata": {
        "id": "czOuDLN1T84Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Display a red line graph.\n",
        "plt.title(\"thickness of folded paper\")\n",
        "plt.xlabel(\"number of folds\")\n",
        "plt.ylabel(\"thickness [m]\")\n",
        "plt.plot(list, color='red')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "lSviJ-HsVAEo",
        "outputId": "302f2780-3ac4-4538-a590-158b824efac0"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the axis value in large size.\n",
        "plt.title(\"thickness of folded paper\")\n",
        "plt.xlabel(\"number of folds\")\n",
        "plt.ylabel(\"thickness[m]\")\n",
        "plt.plot(list, color='green', marker='o', linestyle='solid',linewidth=2, markersize=2)\n",
        "plt.tick_params(labelsize=20) \n",
        "plt.show()\n",
        "#edited line color, line thicker and font size of the value. "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "kqxn6Rq_VVEa",
        "outputId": "56343179-1018-4054-d8c3-4be4a191ceda"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wRWDGZVMWmCj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}